import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'application'
}

group 'com.lexinon.facharbeit'
version '1.0-SNAPSHOT'

sourceSets {
    main {
        java.srcDir 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
    test {
        java.srcDir 'src/test/java'
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(18))
    }
}

tasks.getByName('processResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.run.workingDir('run')

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

repositories {
    mavenCentral()
}

configurations {
    includeInJar
}

dependencies {
    includeInJar platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    includeInJar "org.lwjgl:lwjgl"
    includeInJar "org.lwjgl:lwjgl-assimp"
    includeInJar "org.lwjgl:lwjgl-glfw"
    includeInJar "org.lwjgl:lwjgl-openal"
    includeInJar "org.lwjgl:lwjgl-opengl"
    includeInJar "org.lwjgl:lwjgl-stb"
    includeInJar "org.lwjgl:lwjgl::$lwjglNatives"
    includeInJar "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    includeInJar "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    includeInJar "org.lwjgl:lwjgl-openal::$lwjglNatives"
    includeInJar "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    includeInJar "org.lwjgl:lwjgl-stb::$lwjglNatives"
    includeInJar "org.joml:joml:${jomlVersion}"

    includeInJar "it.unimi.dsi:fastutil:8.5.11"
    includeInJar "org.openjdk.jol:jol-core:0.10"

    configurations.compileClasspath.extendsFrom(configurations.includeInJar)
    configurations.runtimeClasspath.extendsFrom(configurations.includeInJar)
}

application.mainClass = 'com.lexinon.facharbeit.Main'

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.includeInJar.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF', 'META-INF/**'
}